From 196847940af556b7ace87a63a67cb4a368776b8a Mon Sep 17 00:00:00 2001
From: Krishna Agarwal <krishna.agarwal@aptiv.com>
Date: Tue, 7 Feb 2023 16:24:47 +0000
Subject: [PATCH] Disable creating of default logical interface in case of
 slave driver build

BZX-1487: Pfe slave driver is integrated on the Windriver linux

	-apply patches to pfe-slave recipe
	     -there are many recipes in layer nxp-s32g which were added by WindRiver but only to the pfe recipe
	     -some other patch is applied instead
	     -action: add .bbappend which removes the extra patch and instead applies same patches as would be applied by pfe recipe (shared codebase)
	  -pfe-slave driver patch
	     -original behavior is that a logical interface is created on the associated HIF (hif1) - this is unexpected in our use case and can overrule M7 routing decisions
	     -our patch (by Krishna) suppresses creation of such - asked NXP to consider a non-hackish solution from their side
	
	Notes:
	
	AUX interface shows as aux0sl under Linux (we want this one)
	non-AUX interface shows as pfeNsl under Linux (should not show up as disabled on device-tree level)
	it was critical to add a master AUX interface on M7 side (hif0) for IHC and to handle interrupts which drive RPC processing
	
	Change-Id: I88a5ba2d5363afcd2f505cd18c580e534404312b

Upstream-Status: Inappropriate [WR Linux specific change from Aptiv]

Signed-off-by: Krishna Agarwal <krishna.agarwal@aptiv.com>
[Quanyang:
1. the commit message is picked from the commit 1d1372b ("BZX-1487: Pfe slave driver is integrated on the Windriver linux"),
I only cut out the related part of it.
2. Some context modifications are made by me.]
Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 sw/linux-pfeng/pfeng-netif.c | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/sw/linux-pfeng/pfeng-netif.c b/sw/linux-pfeng/pfeng-netif.c
index 331f0eb..f91c664 100644
--- a/sw/linux-pfeng/pfeng-netif.c
+++ b/sw/linux-pfeng/pfeng-netif.c
@@ -22,6 +22,10 @@
 
 #include "pfeng.h"
 
+#ifdef PFE_CFG_PFE_MASTER
+#define PFE_CFG_PFE_NO_SLAVE_LOGIF
+#endif
+
 #define pfeng_netif_for_each_chnl(netif, chnl_idx, chnl)			\
 	for (chnl_idx = 0, chnl = &netif->priv->hif_chnl[chnl_idx];		\
 		chnl_idx < PFENG_PFE_HIF_CHANNELS;				\
@@ -121,7 +125,7 @@ static int pfeng_netif_logif_open(struct net_device *netdev)
 			HM_MSG_NETDEV_ERR(netif->netdev, "Invalid HIF%u (not running)\n", i);
 			return -EINVAL;
 		}
-
+#ifdef PFE_CFG_PFE_NO_SLAVE_LOGIF
 		if (pfeng_netif_is_aux(netif)) {
 			/* PFENG_LOGIF_MODE_TX_CLASS mode requires logIf config */
 			if (!pfe_log_if_is_enabled(chnl->logif_hif)) {
@@ -138,6 +142,7 @@ static int pfeng_netif_logif_open(struct net_device *netdev)
 			} else
 				HM_MSG_NETDEV_DBG(netdev, "Logif HIF%i already in promisc mode\n", i);
 		}
+#endif
 	}
 
 #ifdef PFE_CFG_PFE_MASTER
@@ -1105,7 +1110,9 @@ static int pfeng_netif_control_platform_ifs(struct pfeng_netif *netif)
 
 	/* Prefetch linked HIF(s) */
 	pfeng_netif_for_each_chnl(netif, i, chnl) {
+		#ifdef PFE_CFG_PFE_NO_SLAVE_LOGIF
 		char hifname[16];
+		#endif
 
 		if (!(netif->cfg->hifmap & (1 << i)))
 			continue;
@@ -1139,6 +1146,7 @@ static int pfeng_netif_control_platform_ifs(struct pfeng_netif *netif)
 		}
 		HM_MSG_NETDEV_INFO(netdev, "Enable HIF%u\n", i);
 
+#ifdef PFE_CFG_PFE_NO_SLAVE_LOGIF
 		if (!chnl->logif_hif) {
 			scnprintf(hifname, sizeof(hifname) - 1, "%s-logif", pfe_phy_if_get_name(chnl->phyif_hif));
 			chnl->logif_hif = pfe_log_if_create(chnl->phyif_hif, hifname);
@@ -1158,7 +1166,7 @@ static int pfeng_netif_control_platform_ifs(struct pfeng_netif *netif)
 			refcount_inc(&chnl->logif_hif_count);
 			HM_MSG_NETDEV_DBG(netdev, "HIF Logif reused: %s @%px\n", hifname, chnl->logif_hif);
 		}
-
+#endif
 		if (emac) {
 			if (pfeng_netif_is_aux(netif)) {
 				/* Make sure that HIF ingress traffic will be forwarded to respective EMAC */
@@ -1643,7 +1651,11 @@ static int pfeng_netif_logif_suspend(struct pfeng_netif *netif)
 			/* On Standalone/Master we disable HIF logif instances */
 			chnl->phyif_hif = NULL;
 			if (chnl->logif_hif) {
+
+				#ifdef PFE_CFG_PFE_NO_SLAVE_LOGIF
 				pfe_log_if_disable(chnl->logif_hif);
+				#endif
+
 				chnl->logif_hif = NULL;
 			}
 #else
@@ -1746,6 +1758,7 @@ static int pfeng_netif_logif_resume(struct pfeng_netif *netif)
 		if (chnl->status != PFENG_HIF_STATUS_RUNNING)
 			HM_MSG_NETDEV_WARN(netif->netdev, "HIF%u in invalid state: not running\n", i);
 
+#ifdef PFE_CFG_PFE_NO_SLAVE_LOGIF
 		if (pfeng_netif_is_aux(netif)) {
 			/* PFENG_LOGIF_MODE_TX_CLASS mode requires logIf config */
 			if (!pfe_log_if_is_enabled(chnl->logif_hif)) {
@@ -1762,6 +1775,7 @@ static int pfeng_netif_logif_resume(struct pfeng_netif *netif)
 			} else
 				HM_MSG_NETDEV_DBG(netdev, "Logif HIF%i already in promisc mode\n", i);
 		}
+#endif
 	}
 
 	/* Enable EMAC logif */
